const express = require("express");
const cors = require("cors");

const app = express();
app.use(express.json());
app.use(cors());

// üîπ Middleware para ajustar la pol√≠tica de seguridad de contenido (CSP)
app.use((req, res, next) => {
  res.setHeader("Content-Security-Policy", "default-src 'self'; style-src 'self' 'unsafe-inline'");
  next();
});

// üîπ Middleware de prueba para verificar si Express est√° procesando solicitudes
app.use((req, res, next) => {
  console.log(`üìå Middleware activo: ${req.method} ${req.url}`);
  next();
});

// üîπ Importar rutas de autenticaci√≥n
const authRoutes = require("./routes/authRoutes");
app.use("/api", authRoutes);
console.log("üîπ authRoutes ha sido registrado correctamente.");

// üîπ Ruta de prueba para validar que Express est√° funcionando
app.get("/test-route", (req, res) => {
  res.send("‚úÖ Ruta de prueba activa");
});

// üîπ Ruta para verificar estado del servidor
app.get("/api/status", (req, res) => {
  res.json({ message: "‚úÖ Servidor corriendo correctamente" });
});

// üîπ Iniciar el servidor en el puerto 3000
const PORT = 3000;
app.listen(PORT, () => {
  console.log(`üöÄ Servidor corriendo en http://localhost:${PORT}`);

  // üîπ Verificar middleware y rutas activas despu√©s de iniciar el servidor
  if (app._router && Array.isArray(app._router.stack)) {
    console.log(`üîç Middleware registrado: ${app._router.stack.length}`);

    const rutas = app._router.stack.filter(m => m.route).map(m => m.route.path);
    if (rutas.length) {
      console.log("üîç Rutas registradas en el servidor:");
      rutas.forEach(ruta => console.log(`‚û°Ô∏è Ruta activa: ${ruta}`));
    } else {
      console.log("‚ö†Ô∏è No se encontraron rutas activas. Revisa `authRoutes.js`.");
    }
  } else {
    console.log("‚ùå Error: Express a√∫n no ha inicializado las rutas correctamente.");
  }
});
